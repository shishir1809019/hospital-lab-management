{"version":3,"file":"static/js/217.c1972923.chunk.js","mappings":"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","sources":["pages/apps/Culture/Inbox.tsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Card,\n  Dropdown,\n  ButtonGroup,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\n\nimport LeftBar from \"./LeftBar\";\n\n// dafault data\nimport { emails as mails, chatUsers, records } from \"./data\";\nimport Table from \"../../../components/Table\";\n\nconst Email = ({ email }: { email: EmailItems }) => {\n  return (\n    <li className={classNames({ unread: !email.is_read })}>\n      <div className=\"col-mail col-mail-1\">\n        <div className=\"checkbox-wrapper-mail\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id={\"mail\" + email.id}\n          />\n          <label className=\"toggle\" htmlFor={\"mail\" + email.id}></label>\n        </div>\n        <span\n          className={classNames(\"star-toggle\", \"uil\", \"uil uil-star\", {\n            \"text-warning\": email.is_important,\n          })}\n        ></span>\n        <Link to=\"/apps/email/details\" className=\"title\">\n          {email.from_name}\n          {email.number_of_reply > 1 && <span> ({email.number_of_reply})</span>}\n        </Link>\n      </div>\n      <div className=\"col-mail col-mail-2\">\n        <Link to=\"/apps/email/details\" className=\"subject\">\n          {email.subject} &nbsp;&ndash;&nbsp;\n          <span className=\"teaser\">{email.teaser}</span>\n        </Link>\n        <div className=\"date\">{email.time}</div>\n      </div>\n    </li>\n  );\n};\n\ninterface EmailItems {\n  id: number;\n  from_name: string;\n  from_email: string;\n  subject: string;\n  teaser: string;\n  number_of_reply: number;\n  is_important: boolean;\n  is_read: boolean;\n  time: string;\n  date: string;\n}\n\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"name\",\n    sort: true,\n  },\n  {\n    Header: \"Sample Type\",\n    accessor: \"sampleType\",\n    sort: true,\n  },\n  {\n    Header: \"Price\",\n    accessor: \"price\",\n    sort: true,\n  },\n  {\n    Header: \"Action\",\n    accessor: \"action\",\n    Cell: ({ row }: any) => (\n      <div>\n        <Dropdown as={ButtonGroup} className=\"mt-2 me-1\" align=\"end\">\n          <Dropdown.Toggle variant=\"primary\" className=\"cursor-pointer\">\n            <i className=\"bi bi-gear\"></i>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item as=\"span\">\n              <Link\n                to={`/apps/culture/edit/${row.id}`}\n                className=\"dropdown-item\"\n              >\n                <i className=\"bi bi-pencil-square\"></i> Edit\n              </Link>\n            </Dropdown.Item>\n            <Dropdown.Item as=\"span\">\n              <Link to=\"#\" className=\"dropdown-item\">\n                <i className=\"bi bi-trash-fill\"></i> Delete\n              </Link>\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    ),\n  },\n];\n\nconst sizePerPageList = [\n  {\n    text: \"5\",\n    value: 5,\n  },\n  {\n    text: \"10\",\n    value: 10,\n  },\n  {\n    text: \"25\",\n    value: 25,\n  },\n  {\n    text: \"All\",\n    value: records.length,\n  },\n];\n// Inbox\nconst Culture = () => {\n  const [emails] = useState<Array<EmailItems>>(mails);\n  const [totalEmails] = useState<number>(mails.length);\n  const [startIndex, setStartIndex] = useState<number>(1);\n  const [endIndex, setEndIndex] = useState<number>(20);\n  const [totalUnreadEmails] = useState<number>(\n    mails.filter((e: any) => e.is_read === false).length\n  );\n\n  const unreadEmails = emails.filter((email) => !email.is_read);\n  const importantEmails = emails.filter((email) => email.is_important);\n  const otherEmails = emails.filter(\n    (email) => email.is_read && !email.is_important\n  );\n\n  const getStartIndex = useCallback(\n    (index) => {\n      let start = index - 1;\n      if (start === 0) {\n        return start;\n      } else {\n        return start - unreadEmails.length - importantEmails.length;\n      }\n    },\n    [unreadEmails.length, importantEmails.length]\n  );\n\n  const getEndIndex = useCallback(\n    (index) => {\n      let end = index;\n      return end - unreadEmails.length - importantEmails.length;\n    },\n    [importantEmails.length, unreadEmails.length]\n  );\n\n  const [emailList, setEmailList] = useState<EmailItems[]>(\n    otherEmails.slice(getStartIndex(startIndex), getEndIndex(endIndex))\n  );\n\n  /**\n   * Gets the next page\n   */\n  const getNextPage = () => {\n    const startIdx = startIndex + 20;\n    const endIdx = endIndex + 20;\n    setStartIndex(startIdx);\n    setEndIndex(endIdx);\n    setEmailList(\n      otherEmails.slice(getStartIndex(startIdx), getEndIndex(endIdx))\n    );\n  };\n\n  /**\n   * Gets the prev page\n   */\n  const getPrevPage = () => {\n    const startIdx = startIndex - 20;\n    const endIdx = endIndex - 20;\n    setStartIndex(startIdx);\n    setEndIndex(endIdx);\n    setEmailList(\n      otherEmails.slice(getStartIndex(startIdx), getEndIndex(endIdx))\n    );\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Lab\", path: \"/apps/culture\" },\n          { label: \"Lab Culture\", path: \"/apps/culture\", active: true },\n        ]}\n        title={\"Lab Culture\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Col className=\"text-sm-end mt-sm-0 mt-2\">\n                <Link to=\"add\" className=\"btn btn-primary btn-md float-end\">\n                  <i className=\"uil-plus me-1\"></i>Add New\n                </Link>\n              </Col>\n\n              <Table\n                columns={columns}\n                data={records}\n                pageSize={5}\n                sizePerPageList={sizePerPageList}\n                isSortable={true}\n                pagination={true}\n                isSearchable={true}\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Culture;\n"],"names":["columns","Header","accessor","sort","Cell","_ref2","row","_jsx","children","_jsxs","Dropdown","as","ButtonGroup","className","align","variant","Link","to","concat","id","sizePerPageList","text","value","records","_useState","useState","mails","emails","_slicedToArray","_useState3","_useState5","_useState6","startIndex","_useState7","_useState8","endIndex","_useState9","e","is_read","length","unreadEmails","filter","email","importantEmails","is_important","otherEmails","getStartIndex","useCallback","index","start","getEndIndex","_useState11","slice","_useState12","_Fragment","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","Card","Table","data","pageSize","isSortable","pagination","isSearchable"],"sourceRoot":""}