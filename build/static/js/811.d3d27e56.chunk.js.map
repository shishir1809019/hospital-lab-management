{"version":3,"file":"static/js/811.d3d27e56.chunk.js","mappings":"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","sources":["pages/apps/Test/data.tsx","pages/apps/Test/index.tsx"],"sourcesContent":["// images\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\nimport avatar2 from \"../../../assets/images/users/avatar-2.jpg\";\nimport avatar3 from \"../../../assets/images/users/avatar-3.jpg\";\nimport avatar5 from \"../../../assets/images/users/avatar-5.jpg\";\nimport avatar6 from \"../../../assets/images/users/avatar-6.jpg\";\nimport avatar8 from \"../../../assets/images/users/avatar-8.jpg\";\nimport avatar9 from \"../../../assets/images/users/avatar-9.jpg\";\nimport avatar10 from \"../../../assets/images/users/avatar-10.jpg\";\n\nexport interface ChatUserType {\n  id?: number;\n  name?: string;\n  avatar?: string;\n  lastMessage?: string;\n  totalUnread?: number;\n  lastMessageOn?: string;\n  userStatus?: \"busy\" | \"online\" | \"away\" | \"offline\";\n}\n\nexport interface MessageItem {\n  id: number;\n  from: ChatUserType;\n  to: ChatUserType;\n  messages: {\n    type?: string;\n    value?: any;\n  }[];\n  sendOn?: string;\n}\n\nexport interface ChatMessage {\n  id: number;\n  day: string;\n  messages: MessageItem[];\n}\n\n// list of chat users\nconst USERS: ChatUserType[] = [\n  {\n    id: 1,\n    name: \"Brandon Smith\",\n    avatar: avatar2,\n    lastMessage: \"How are you today?\",\n    totalUnread: 3,\n    lastMessageOn: \"5:30am\",\n    userStatus: \"offline\",\n  },\n  {\n    id: 2,\n    name: \"Maria C\",\n    avatar: avatar10,\n    lastMessage: \"Hey! a reminder for tomorrow's meeting?\",\n    totalUnread: 0,\n    lastMessageOn: \"Thu\",\n    userStatus: \"online\",\n  },\n  {\n    id: 3,\n    name: \"Dominic A\",\n    avatar: avatar8,\n    lastMessage: \"Are we going to have this week's planning meeting?\",\n    totalUnread: 0,\n    lastMessageOn: \"4:30 am\",\n    userStatus: \"busy\",\n  },\n  {\n    id: 4,\n    name: \"Ronda D\",\n    avatar: avatar9,\n    lastMessage: \"Please check these design assets..\",\n    totalUnread: 0,\n    lastMessageOn: \"Wed\",\n    userStatus: \"online\",\n  },\n  {\n    id: 5,\n    name: \"Michael H\",\n    avatar: avatar3,\n    lastMessage: \"Are you free for 15 mins? I would like to discuss something\",\n    totalUnread: 25,\n    lastMessageOn: \"Tue\",\n    userStatus: \"offline\",\n  },\n  {\n    id: 6,\n    name: \"Thomas R\",\n    avatar: avatar5,\n    lastMessage: \"Let's have meeting today between me, you and Tony...\",\n    totalUnread: 0,\n    lastMessageOn: \"Tue\",\n    userStatus: \"offline\",\n  },\n  {\n    id: 7,\n    name: \"Thomas J\",\n    avatar: avatar6,\n    lastMessage: \"How are you?\",\n    totalUnread: 1,\n    lastMessageOn: \"Tue\",\n    userStatus: \"offline\",\n  },\n  {\n    id: 8,\n    name: \"Rikcy J\",\n    avatar: avatar1,\n    lastMessage: \"Are you interested in learning?\",\n    totalUnread: 0,\n    lastMessageOn: \"Mon\",\n    userStatus: \"away\",\n  },\n];\n\nconst defaultTo: ChatUserType = {\n  id: 9,\n  name: \"Shreyu N\",\n  avatar: avatar2,\n};\n\nconst YESTERDAYMESSAGES: MessageItem[] = [];\nconst TODAYMESSAGES: MessageItem[] = [];\n\nfor (const user of USERS) {\n  YESTERDAYMESSAGES.push(\n    {\n      id: 1,\n      messages: [\n        {\n          type: \"text\",\n          value: \"Hello!\",\n        },\n      ],\n      to: defaultTo,\n      from: user,\n      sendOn: \"8:18 am\",\n    },\n    {\n      id: 2,\n      messages: [\n        {\n          type: \"text\",\n          value: \"Hi, How are you? What about our next meeting?\",\n        },\n      ],\n      to: user,\n      from: defaultTo,\n      sendOn: \"8:20 am\",\n    }\n  );\n  TODAYMESSAGES.push(\n    {\n      id: 1,\n      messages: [\n        {\n          type: \"text\",\n          value: \"Yeah everything is fine\",\n        },\n        {\n          type: \"text\",\n          value: \"Let's have it today if you are free\",\n        },\n      ],\n      to: defaultTo,\n      from: user,\n      sendOn: \"8:21 am\",\n    },\n    {\n      id: 2,\n      messages: [\n        {\n          type: \"text\",\n          value: \"Sure thing! let me know if 2pm works for you\",\n        },\n      ],\n      to: user,\n      from: defaultTo,\n      sendOn: \"8:25 am\",\n    },\n    {\n      id: 3,\n      messages: [\n        {\n          type: \"text\",\n          value:\n            \"Sorry, I have another meeting scheduled at 2pm. Can we have it at 3pm instead?\",\n        },\n      ],\n      to: defaultTo,\n      from: user,\n      sendOn: \"8:26 am\",\n    },\n    {\n      id: 4,\n      messages: [\n        {\n          type: \"text\",\n          value:\n            \"2pm it is. sure, we can also discuss about the presentation talk format if you have some extra mins\",\n        },\n        {\n          type: \"text\",\n          value:\n            \"Sure, let's discuss about presentation format, it would be great to finalize today.\",\n        },\n      ],\n      to: user,\n      from: defaultTo,\n      sendOn: \"8:27 am\",\n    },\n    {\n      id: 5,\n      messages: [\n        {\n          type: \"text\",\n          value: \"Ok. I am attaching the last year format and assets here....\",\n        },\n        {\n          type: \"file\",\n          value: {\n            file: \"Shreyu-sketch.zip\",\n            size: \"2.3MB\",\n          },\n        },\n      ],\n      to: defaultTo,\n      from: user,\n      sendOn: \"8:32 am\",\n    }\n  );\n}\n// list of chat messages\nconst CHATHISTORY: ChatMessage[] = [\n  {\n    id: 1,\n    day: \"Yesterday\",\n    messages: [...YESTERDAYMESSAGES],\n  },\n  {\n    id: 2,\n    day: \"Today\",\n    messages: [...TODAYMESSAGES],\n  },\n];\ninterface Record {\n  name: string;\n  shortcut: string;\n  sampleType: string;\n  price: number;\n}\n\nconst sampleTypes = [\"Blood\", \"Urine\", \"Saliva\", \"Tissue\"];\nconst basePrice = 100; // Base price to calculate random prices\n\n// Function to generate a random sample type\nconst getRandomSampleType = () => {\n  const idx = Math.floor(Math.random() * sampleTypes.length);\n  return sampleTypes[idx];\n};\n\n// Function to generate a random price\nconst getRandomPrice = () => {\n  return Math.floor(Math.random() * 200) + basePrice;\n};\n\n// Function to generate random records\nconst generateRecords = (count: number): Record[] => {\n  return Array.from({ length: count }, (_, index) => ({\n    name: `Test ${index + 1}`,\n    shortcut: `T${1001 + index}`,\n    sampleType: getRandomSampleType(),\n    price: getRandomPrice(),\n  }));\n};\n\n// Generate 50 lab test records\nconst records: Record[] = generateRecords(50);\n\nexport { USERS, CHATHISTORY, records };\n","import React, { useState } from \"react\";\nimport { Row, Col, Card, Button, Dropdown, ButtonGroup } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\n\n// dummy data\nimport { USERS, ChatUserType, records } from \"./data\";\n\nimport Table from \"../../../components/Table\";\nimport { Link } from \"react-router-dom\";\n\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"name\",\n    sort: true,\n  },\n  {\n    Header: \"Shortcut\",\n    accessor: \"shortcut\",\n    sort: true,\n  },\n  {\n    Header: \"Sample Type\",\n    accessor: \"sampleType\",\n    sort: true,\n  },\n  {\n    Header: \"Price\",\n    accessor: \"price\",\n    sort: true,\n  },\n  {\n    Header: \"Action\",\n    accessor: \"action\",\n    sort: false, // Typically, you don't sort by action columns\n    // Optional: Define how the cell should render if you're using custom render logic,\n    // for example, buttons for edit and delete actions\n    Cell: ({ row }: any) => (\n      <div>\n        <Dropdown as={ButtonGroup} className=\"mt-2 me-1\" align=\"end\">\n          <Dropdown.Toggle variant=\"primary\" className=\"cursor-pointer\">\n            <i className=\"bi bi-gear\"></i>\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item href=\"/apps/test/edit\">\n              <i className=\"bi bi-pencil-square\"></i> Edit\n            </Dropdown.Item>\n\n            <Dropdown.Item href=\"#\">\n              <i className=\"bi bi-trash-fill\"></i> Delete\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    ),\n  },\n];\n\n// Example handler functions for actions\nfunction handleEdit(data: any) {\n  console.log(\"Edit Data:\", data);\n  // Implement your edit logic here\n}\n\nfunction handleDelete(data: any) {\n  console.log(\"Delete Data:\", data);\n  // Implement your delete logic here\n}\n\nconst sizePerPageList = [\n  {\n    text: \"5\",\n    value: 5,\n  },\n  {\n    text: \"10\",\n    value: 10,\n  },\n  {\n    text: \"25\",\n    value: 25,\n  },\n  {\n    text: \"All\",\n    value: records.length,\n  },\n];\n\n// TestApp\nconst TestApp = () => {\n  const [selectedUser, setSelectedUser] = useState<ChatUserType>(USERS[1]);\n\n  /**\n   * On user change\n   */\n  const onUserChange = (user: ChatUserType) => {\n    setSelectedUser(user);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[{ label: \"Apps\", path: \"/apps/test\" }]}\n        title={\"Lab tests\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Col className=\"text-sm-end mt-sm-0 mt-2\">\n                <Link to=\"add\" className=\"btn btn-primary btn-md float-end\">\n                  <i className=\"uil-plus me-1\"></i>Add New\n                </Link>\n              </Col>\n\n              <Table\n                columns={columns}\n                data={records}\n                pageSize={5}\n                sizePerPageList={sizePerPageList}\n                isSortable={true}\n                pagination={true}\n                isSearchable={true}\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default TestApp;\n"],"names":["USERS","id","name","avatar","avatar2","lastMessage","totalUnread","lastMessageOn","userStatus","avatar3","avatar5","avatar6","avatar1","defaultTo","YESTERDAYMESSAGES","TODAYMESSAGES","_i","_USERS","length","user","push","messages","type","value","to","from","sendOn","file","size","concat","count","sampleTypes","getRandomSampleType","idx","Math","floor","random","records","Array","_","index","shortcut","sampleType","price","columns","Header","accessor","sort","Cell","_ref","row","_jsx","children","_jsxs","Dropdown","as","ButtonGroup","className","align","variant","href","sizePerPageList","text","_useState","useState","_useState2","_slicedToArray","_Fragment","PageTitle","breadCrumbItems","label","path","title","Row","Col","Card","Link","Table","data","pageSize","isSortable","pagination","isSearchable"],"sourceRoot":""}